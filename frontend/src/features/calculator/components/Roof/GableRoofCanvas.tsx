import { useEffect, useRef } from 'react';

export default function GableRoofCanvas({ roofParams }: any) {
    const { houseLength, houseWidth, battenWidth, battenThickness, battenSpacing, rafterSpacing, roofOverhang } = roofParams;
    const canvasRef = useRef(null);

    useEffect(() => {
        const canvas = canvasRef.current as any;
        const ctx = canvas.getContext('2d');
        const canvasSize = 600;  // –†–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const beamWidthInCm = 40;  // –®–∏—Ä–∏–Ω–∞ –º–∞—É—ç—Ä–ª–∞—Ç–∞ –≤ —Å–º
        const ridgeBeamWidthCm = 20;
        const padding = 70;  // –ü–∞–¥–¥–∏–Ω–≥ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—à—Ç–∞–± (—á—Ç–æ–±—ã –º–∞–∫–µ—Ç –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–≤–∞—Å–∞)
        const maxHouseDimension = Math.max(houseLength, houseWidth);
        const cmToPx = (canvasSize - padding * 2) / (maxHouseDimension + roofOverhang * 2);

        // –†–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const houseLengthInPx = houseLength * cmToPx;
        const houseWidthInPx = houseWidth * cmToPx;
        const ridgeBeamWidthPx = ridgeBeamWidthCm * cmToPx;
        const beamWidthInPx = beamWidthInCm * cmToPx;
        const overhangInPx = roofOverhang * cmToPx;

        // –û—á–∏—Å—Ç–∫–∞ Canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // –ü–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        const startX = (canvas.width - houseLengthInPx) / 2;
        const startY = (canvas.height - houseWidthInPx) / 2;

        // üîπ –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–æ–º–∞
        ctx.fillStyle = '#fff';  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
        ctx.fillRect(startX, startY, houseLengthInPx, houseWidthInPx);

        // üîπ Mauerlat (–ü–ï–†–ò–ú–ï–¢–†)
        ctx.fillStyle = '#ffb84d';
        ctx.strokeStyle = '#f9d15a';
        ctx.lineWidth = 2;

        // –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –ª–∏–Ω–∏–∏ –º–∞—É—ç—Ä–ª–∞—Ç–∞
        ctx.fillRect(startX, startY, houseLengthInPx, beamWidthInPx);
        ctx.strokeRect(startX, startY, houseLengthInPx, beamWidthInPx);

        ctx.fillRect(startX, startY + houseWidthInPx - beamWidthInPx, houseLengthInPx, beamWidthInPx);
        ctx.strokeRect(startX, startY + houseWidthInPx - beamWidthInPx, houseLengthInPx, beamWidthInPx);

        // –õ–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –ª–∏–Ω–∏–∏ –º–∞—É—ç—Ä–ª–∞—Ç–∞
        ctx.fillRect(startX, startY, beamWidthInPx, houseWidthInPx);
        ctx.strokeRect(startX, startY, beamWidthInPx, houseWidthInPx);

        ctx.fillRect(startX + houseLengthInPx - beamWidthInPx, startY, beamWidthInPx, houseWidthInPx);
        ctx.strokeRect(startX + houseLengthInPx - beamWidthInPx, startY, beamWidthInPx, houseWidthInPx);

        // üîπ –û–±—Ä–µ—à–µ—Ç–∫–∞
        ctx.fillStyle = '#ffeaaa';
        ctx.strokeStyle = '#e9c862';
        ctx.lineWidth = 1;

        const centerY = startY + houseWidthInPx / 2;

        for (let y = centerY; y >= startY - overhangInPx; y -= battenSpacing * cmToPx) {
            ctx.fillRect(startX - overhangInPx, y - battenWidth * cmToPx / 2, houseLengthInPx + overhangInPx * 2, battenWidth * cmToPx);
            ctx.strokeRect(startX - overhangInPx, y - battenWidth * cmToPx / 2, houseLengthInPx + overhangInPx * 2, battenWidth * cmToPx);
        }

        for (let y = centerY; y <= startY + houseWidthInPx + overhangInPx; y += battenSpacing * cmToPx) {
            ctx.fillRect(startX - overhangInPx, y - battenWidth * cmToPx / 2, houseLengthInPx + overhangInPx * 2, battenWidth * cmToPx);
            ctx.strokeRect(startX - overhangInPx, y - battenWidth * cmToPx / 2, houseLengthInPx + overhangInPx * 2, battenWidth * cmToPx);
        }

        // –ö–æ–Ω—å–∫–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω
        ctx.fillStyle = '#ffeaaa';
        ctx.strokeStyle = '#e9c862';
        const ridgeX = startX - overhangInPx;
        const ridgeY = startY + houseWidthInPx / 2 - ridgeBeamWidthPx / 2;
        ctx.fillRect(ridgeX, ridgeY, houseLengthInPx + overhangInPx * 2, ridgeBeamWidthPx);
        ctx.strokeRect(ridgeX, ridgeY, houseLengthInPx + overhangInPx * 2, ridgeBeamWidthPx);

        // –î–æ–±–∞–≤–∏–º –ª–∏–Ω–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ (—Å—Ç—Ä–µ–ª–∫–∏ –∏ —Ç–µ–∫—Å—Ç)
        drawDimensionLine({
            ctx: ctx,
            x1: startX - overhangInPx - 15, // –°–º–µ—â–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –≤–ª–µ–≤–æ –æ—Ç –º–æ–¥–µ–ª–∏
            y1: startY - overhangInPx,      // –ù–∞—á–∞–ª–æ –ª–∏–Ω–∏–∏ –≤–≤–µ—Ä—Ö—É
            x2: startX - overhangInPx - 15, // –ö–æ–Ω–µ—Ü –ª–∏–Ω–∏–∏ —Ç–æ–∂–µ –≤–ª–µ–≤–æ –æ—Ç –º–æ–¥–µ–ª–∏
            y2: startY + houseWidthInPx + overhangInPx, // –ù–∏–∑ –ª–∏–Ω–∏–∏
            label: `${houseLength}`,
            orientation: 'vertical'
        });

        drawDimensionLine({
            ctx: ctx,
            x1: startX - overhangInPx,
            y1: startY + houseWidthInPx + overhangInPx + 15,
            x2: startX + houseLengthInPx + overhangInPx,
            y2: startY + houseWidthInPx + overhangInPx + 15,
            label: `${houseWidth}`,
            orientation: 'horizontal'
        });

        // –°—Ç—Ä–æ–ø–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        const rafterWidthInPx = 6 * cmToPx;
        const totalHeightInPx = houseWidthInPx + 2 * overhangInPx;

        const startY2 = startY - overhangInPx;
        const numberOfRafters = Math.floor(houseLengthInPx / rafterSpacing + cmToPx / 2);
        const adjustedSpacing = (houseLengthInPx - rafterWidthInPx) / (numberOfRafters - 1);

        for (let i = 0; i < numberOfRafters; i++) {
            const x = startX + i * adjustedSpacing;
            ctx.fillRect(x - rafterWidthInPx / 2, startY2, rafterWidthInPx, totalHeightInPx);
            ctx.strokeRect(x - rafterWidthInPx / 2, startY2, rafterWidthInPx, totalHeightInPx);
        }

    }, [roofParams]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º
    const drawDimensionLine = ({ ctx, x1, y1, x2, y2, label, orientation }: any) => {

        // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–æ–∫
        const arrowSize = 6;

        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.strokeStyle = 'black';
        ctx.lineWidth = 1;
        ctx.stroke();

        ctx.fillStyle = 'black';

        if (orientation === 'vertical') {
            // –õ–µ–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞
            ctx.beginPath();
            ctx.moveTo(x1, y1);             // –ù–∞—á–∞–ª–æ —Å—Ç—Ä–µ–ª–∫–∏
            ctx.lineTo(x1 - arrowSize, y1 + arrowSize); // –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∏
            ctx.lineTo(x1 + arrowSize, y1 + arrowSize); // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∏
            ctx.closePath();
            ctx.fill();

            // –ü—Ä–∞–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞
            ctx.beginPath();
            ctx.moveTo(x2, y2);             // –ù–∞—á–∞–ª–æ —Å—Ç—Ä–µ–ª–∫–∏
            ctx.lineTo(x2 - arrowSize, y2 - arrowSize); // –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∏
            ctx.lineTo(x2 + arrowSize, y2 - arrowSize); // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∏
            ctx.closePath();
            ctx.fill();
        }
        if (orientation === 'horizontal') {

            // –õ–µ–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞ (—É–∫–∞–∑–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–æ)
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x1 + arrowSize, y1 - arrowSize);
            ctx.lineTo(x1 + arrowSize, y1 + arrowSize);
            ctx.closePath();
            ctx.fill();

            // –ü—Ä–∞–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞ (—É–∫–∞–∑–∞—Ç–µ–ª—å –≤–ª–µ–≤–æ)
            ctx.beginPath();
            ctx.moveTo(x2, y2);
            ctx.lineTo(x2 - arrowSize, y2 - arrowSize);
            ctx.lineTo(x2 - arrowSize, y2 + arrowSize);
            ctx.closePath();
            ctx.fill();
        }

        // –¢–µ–∫—Å—Ç (–ø–æ —Ü–µ–Ω—Ç—Ä—É –ª–∏–Ω–∏–∏)
        ctx.font = '10px Arial';

        const textOffset = orientation === 'vertical' ? 15 : -15;
        const midX = (x1 + x2) / 2;
        const midY = (y1 + y2) / 2;

        if (orientation === 'vertical') {
            ctx.fillText(label, midX - 30, midY);
        } else {
            ctx.fillText(label, midX, midY + 15);  // –°–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ –ª–∏–Ω–∏–∏
        }

    };


    return (
        <div className="flex h-screen">
            <div className="w-full overflow-hidden">
                <canvas
                    ref={canvasRef}
                    width={600}
                    height={600}
                    className="bg-[#f8f9fa] border border-gray-300 w-full h-auto"
                />
            </div>
        </div>
    );
}
