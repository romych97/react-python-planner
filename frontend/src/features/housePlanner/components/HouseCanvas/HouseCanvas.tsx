'use client'

import { useRef, useEffect } from 'react';
import { useHouseStore } from '@/store/houseStore';

export default function HouseCanvas() {
    const { house, roof } = useHouseStore() as any;
    const canvasRef = useRef(null);

    useEffect(() => {
        const canvas = canvasRef.current as any;
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        const scale = 500 / Math.max(house.width, house.length);
        const widthPx = house.width * scale;
        const lengthPx = house.length * scale;
        const wallThicknessPx = house.wallThickness * scale;

        // üîπ –ö–æ–Ω—å–∫–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω (–ø–æ —Ü–µ–Ω—Ç—Ä—É –∫—Ä—ã—à–∏)
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(50, 50 + lengthPx / 2);
        ctx.lineTo(50 + widthPx, 50 + lengthPx / 2);
        ctx.stroke();

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ—Ä–∏
        ctx.fillStyle = '#964B00';
        for (let i = 0; i < house.doors; i++) {
            const x = 50 + (i + 1) * (widthPx / (house.doors + 1));
            ctx.fillRect(x - 15, 50 + lengthPx - wallThicknessPx, 30, wallThicknessPx);
        }

        // üîπ –†–∏—Å—É–µ–º —Å—Ç–µ–Ω—ã
        ctx.fillStyle = '#aaa';
        ctx.fillRect(50, 50, widthPx, wallThicknessPx); // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∞
        ctx.fillRect(50, 50 + lengthPx - wallThicknessPx, widthPx, wallThicknessPx); // –ù–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∞
        ctx.fillRect(50, 50, wallThicknessPx, lengthPx); // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞
        ctx.fillRect(50 + widthPx - wallThicknessPx, 50, wallThicknessPx, lengthPx); // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–∞ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–µ–Ω–∞–º)
        ctx.fillStyle = '#69c';
        for (let i = 0; i < house.windows; i++) {
            const x = 50 + (i + 1) * (widthPx / (house.windows + 1));
            ctx.fillRect(x - 10, 50, 20, wallThicknessPx); // –û–∫–Ω–∞ —Å–≤–µ—Ä—Ö—É
        }

        ctx.strokeStyle = '#666';
        ctx.fillStyle = '#8B4513'; // –¶–≤–µ—Ç —Å—Ç—Ä–æ–ø–∏–ª

        const firstRafterX = 50; // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–ø–∏–ª–∞ –Ω–∞ –º–∞—É—ç—Ä–ª–∞—Ç–µ
        const lastRafterX = 50 + widthPx; // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–ø–∏–ª–∞ —Ç–æ–∂–µ –Ω–∞ –º–∞—É—ç—Ä–ª–∞—Ç–µ

        const overhangPx = roof.overhang * scale; // –î–ª–∏–Ω–∞ –≤—ã–Ω–æ—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–ø–∏–ª —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å
        const numberOfRafters = Math.floor(widthPx / (roof.rafterSpacing * scale)) + 1;
        const adjustedSpacing = widthPx / (numberOfRafters - 1);

        for (let i = 0; i < numberOfRafters; i++) {
            const x = firstRafterX + i * adjustedSpacing;
            ctx.fillRect(x - 3, 50 - overhangPx, 6, lengthPx + overhangPx * 2); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–Ω–æ—Å
            ctx.strokeRect(x - 3, 50 - overhangPx, 6, lengthPx + overhangPx * 2);
        }

    }, [house]);

    return <canvas className='bg-[#f8f9fa] border border-gray-300 w-full h-auto' ref={canvasRef} width={600} height={600} />;
}
